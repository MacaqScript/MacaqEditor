/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jme3.macaq.editor.base;

import com.jme3.macaq.editor.MacaqTopComponent;
import com.jme3.macaq.logic.AbstractLogicalComponent;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import org.openide.nodes.Node;

/**
 *
 * @author Rickard <neph1 @ github>
 */
public class LogicPanel extends javax.swing.JPanel implements MacaqGuiComponent, PropertyChangeListener{

    protected Point anchorPoint;
    protected Cursor draggingCursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
    protected boolean overbearing = false;
    private int id;
    private ComponentSelectedListener listener;
    private boolean dragged = false;
    private boolean selected;
    private Border normalBorder;
    private Color highlightColor = new Color(155, 255, 155);
    private String typeName;
    Node node;
    /**
     * Creates new form LogicPanel
     */
    public LogicPanel(AbstractLogicalComponent component) {
        
        initComponents();
        initMenu();
        nameField.setEditable(false);
        normalBorder = getBorder();
        typeName = component.getName();
        nameField.setText(component.getName() != null ? String.format("%s (%s)", component.getName(), component.getClass().getSimpleName()) : component.getClass().getSimpleName());
        setLocation(component.getX(), component.getY());
        setId(component.getId());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionsMenu = new javax.swing.JPopupMenu();
        nameField = new javax.swing.JTextField();
        inConnectionPanel = new javax.swing.JPanel();
        outConnectionPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setComponentPopupMenu(optionsMenu);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(110, 32767));
        setPreferredSize(new java.awt.Dimension(110, 90));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        nameField.setText(org.openide.util.NbBundle.getMessage(LogicPanel.class, "LogicPanel.nameField.text")); // NOI18N
        nameField.setName("nameField"); // NOI18N
        nameField.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                nameFieldMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                nameFieldMouseMoved(evt);
            }
        });
        nameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                nameFieldMouseReleased(evt);
            }
        });

        inConnectionPanel.setAlignmentX(0.0F);
        inConnectionPanel.setMaximumSize(new java.awt.Dimension(50, 32767));
        inConnectionPanel.setMinimumSize(new java.awt.Dimension(50, 50));
        inConnectionPanel.setName("inConnectionsPanel"); // NOI18N
        inConnectionPanel.setPreferredSize(new java.awt.Dimension(54, 50));

        outConnectionPanel.setAlignmentX(1.0F);
        outConnectionPanel.setMaximumSize(new java.awt.Dimension(50, 32767));
        outConnectionPanel.setMinimumSize(new java.awt.Dimension(50, 50));
        outConnectionPanel.setName("outConnectionsPanel"); // NOI18N
        outConnectionPanel.setPreferredSize(new java.awt.Dimension(54, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nameField)
            .addGroup(layout.createSequentialGroup()
                .addComponent(inConnectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(outConnectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inConnectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outConnectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nameFieldMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameFieldMouseMoved
        anchorPoint = evt.getPoint();
        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_nameFieldMouseMoved

    private void nameFieldMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameFieldMouseDragged
        int anchorX = anchorPoint.x;
        int anchorY = anchorPoint.y;

        Point parentOnScreen = getParent().getLocationOnScreen();
        Point mouseOnScreen = evt.getLocationOnScreen();
        Point position = new Point(mouseOnScreen.x - parentOnScreen.x - 
        anchorX, mouseOnScreen.y - parentOnScreen.y - anchorY);
        setLocation(position);
        //Change Z-Buffer if it is "overbearing"
        if (overbearing) {
            getParent().setComponentZOrder(this, 0);
            repaint();
        }
        dragged = true;
    }//GEN-LAST:event_nameFieldMouseDragged

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if(evt.getButton() == MouseEvent.BUTTON1 && listener != null){
            listener.onSelected(this);
            setSelected(true);
        }
    }//GEN-LAST:event_formMouseClicked

    private void nameFieldMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameFieldMouseReleased
        if(dragged){
            Point parentOnScreen = getParent().getLocationOnScreen();
            Point mouseOnScreen = evt.getLocationOnScreen();
            Point position = new Point(mouseOnScreen.x - parentOnScreen.x - 
            anchorPoint.x, mouseOnScreen.y - parentOnScreen.y - anchorPoint.y);
            if(listener != null){
                listener.onMove(this, position.x, position.y);
            }
        }
    }//GEN-LAST:event_nameFieldMouseReleased

    public ConnectionPanel findConnection(Component c, int x, int y){
        ConnectionPanel conn = null;
      if(c instanceof ConnectionPanel && c.contains(x, y )){
            conn = (ConnectionPanel) c;
        } else if(c instanceof JComponent){
            for(Component comp : ((JComponent)c).getComponents()){
                conn = findConnection(comp, x - comp.getX(), y - comp.getY());
                if(conn != null){
                    break;
                }
            }
        }
        return conn;
    }
    
    private void initMenu(){
        ActionListener menuListener = new ActionListener() {
            
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(ae.getActionCommand().equals("Delete")){
                    MacaqTopComponent.findInstance().removeLogicComponent(LogicPanel.this);
                }
            }
        };
        JMenuItem item = new JMenuItem("Delete");
            item.addActionListener(menuListener);
            optionsMenu.add(item);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel inConnectionPanel;
    private javax.swing.JTextField nameField;
    private javax.swing.JPopupMenu optionsMenu;
    private javax.swing.JPanel outConnectionPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public int getId() {
        return id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }
    
    public void setId(Integer id){
        this.id = id;
    }

    @Override
    public void setSelectedListener(ComponentSelectedListener listener) {
        this.listener = listener;
    }

    @Override
    public void setNode(Node node) {
        this.node = node;
    }

    @Override
    public Node getNode() {
        return node;
    }

    public boolean isSelected() {
        return selected;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
        if(selected){
            setBorder(new LineBorder(highlightColor, 2));
            
        } else {
            setBorder(normalBorder);
        }
        for(Component c : inConnectionPanel.getComponents()){
            if(c instanceof ConnectionPanel){
                ((ConnectionPanel) c).setSelected(selected);
            }
        }
        for(Component c : outConnectionPanel.getComponents()){
            if(c instanceof ConnectionPanel){
                ((ConnectionPanel) c).setSelected(selected);
            }
        }
    }

    public void setNameField(String text){
        nameField.setText(text);
        nameField.repaint();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        Logger.getLogger(LogicPanel.class.getSimpleName()).log(Level.INFO, "Event {0} ", evt);
        if(evt != null && evt.getPropertyName() != null && evt.getPropertyName().equals("name")){
            setNameField(String.format("%s (%s)", evt.getNewValue(), typeName));
        }
    }
}
