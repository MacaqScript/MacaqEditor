/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jme3.macaq.editor.gui;

import com.jme3.macaq.base.LogicInConnection;
import com.jme3.macaq.base.LogicOutConnection;
import com.jme3.macaq.editor.base.ConnectionPanel;
import com.jme3.macaq.editor.gui.util.GuiUtil;
import com.jme3.macaq.logic.AbstractLogicalComponent;
import java.awt.Color;
import java.awt.Graphics;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Rickard <neph1 @ github>
 */
public class ConnectionMainPanel extends javax.swing.JPanel {

    /**
     * Creates new form ConnectionMainPanel
     */
    public ConnectionMainPanel() {
        initComponents();
        setOpaque(false);
    }
    
    private Map<Integer, ConnectionPanel> connectionMap = new HashMap<>();
    private boolean mousePressed = true;
    private int lineFromX;
    private int lineFromY;
    private int lineToX;
    private int lineToY;
    
    private Color normalColor = Color.gray;
    private Color highlightColor = new Color(155, 255, 155);

    
    public void addLogic(ConnectionPanel connection){
        connectionMap.put(connection.getConnection().getId(), connection);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.setColor(highlightColor);
        if(mousePressed){
//            int[][] line = GuiUtil.generatePolyLine(lineFromX, lineFromY, lineToX, lineToY);
//            g.drawPolyline(line[0], line[1], 4);
            g.drawLine(lineFromX, lineFromY, lineToX, lineToY);
        }
        
        for(ConnectionPanel l : connectionMap.values()){
            if(!l.isInConnection()){
                for(LogicInConnection c2 : ((LogicOutConnection)l.getConnection()).getConnections()){
                    if(c2 != null){
                        g.setColor(normalColor);
                        ConnectionPanel l2 = connectionMap.get(c2.getId());
                        if(l2 != null){
                            if(l.isSelected() || l2.isSelected()){
                                g.setColor(highlightColor);
                            }
                            int[][] line = GuiUtil.generatePolyLine(l.getAbsX(), l.getAbsY(), l2.getAbsX(), l2.getAbsY());
                            g.drawPolyline(line[0], line[1], line[0].length);
                        }
                    }
                }
            }
        }
        
    }
    
    public void shouldDrawLine(boolean pressed){
        this.mousePressed = pressed;
    }
    
    public void setLineCoords(int x1, int y1, int x2, int y2){
        this.lineFromX = x1;
        this.lineFromY = y1;
        this.lineToX = x2;
        this.lineToY = y2;
    }
    
    public void clear(){
        connectionMap.clear();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
